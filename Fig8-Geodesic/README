Anderson Acceleration for Nonconvex ADMM Based on Douglas-Rachford Splitting - Geodesic example
===============================================================================


---------------------
I. COMPILING THE CODE
---------------------

1) The code implements the following three commands
- 'GeodDistSolver' for computing geodesic distance;
- 'ViewScalarField' for visualizing the distance on a mesh;
- 'CompareDistance' for computing mean relative error of the computed distance


2) The code requires Eigen. On Ubuntu or Debian, this can be installed using the following command: 

	$ apt-get instal libeigen3-dev

On macOS, you can install Eigen with HomeBrew command:

	$ brew install eigen
  
On Windows, you can download Eigen and extract it into the 'external' folder. Make sure you rename the Eigen folder as 'eigen', so that you can locate the file external/eigen/Eigen/Dense.


3) In addition, compiling 'ViewScalarField' requires libigl and glfw: 
- To install libigl, please download it from github, unzip it and rename the folder as 'libigl', and place it inside the 'external' folder. Make sure you can locate the folder external/libigl/include.
- To install glfw: On Ubuntu or Debian, use command 'apt-get install libglfw3-dev'. On macOs, use command 'brew install glfw'. On Windows, download the binary from www.glfw.org and install.
You can disable the compilation of ViewScalarField when generating the project file with cmake, via the flag 'WITH_VIEWER'.


4) After installing all the dependencies, use cmake to generate the project file and compile. If you use a cmake GUI, you can turn on/off OpenMP support and the compilation of the viewer. You can then compile the project and generate the executables.

- The default compiler macOS (Apple Clang from Xcode) does not support OpenMP. To achieve best performance, it is recommended to compile the code with HomeBrew gcc. For example, if you create a build folder in the source code directory, then use the following command (assuming gcc-8 and g++-8 are installed by HomeBrew)

	$ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8 ..

You can also replace the command 'cmake' with 'ccmake' to invoke a console GUI.


---------------------
II. USAGE OF COMMANDS
---------------------

1) To compute geodesic distance, use the command

	$ GeodDistSolver PARAMETERS_FILE MESH_FILE DISTANCE_FILE

- PARAMETERS_FILE: solver parameter file; an example file (SolverParams.txt) is provided
- MESH_FILE: triangle mesh file
- DISTANCE_FILE: an output file that stores the distance for each vertex

The command will print out peak memory consumption at the end.

Add an folder "result" in YOUR_BUILD_PATH, if you'd like to get the output file.

**You can also put "ForOurs.py" in "./build/" and run it. You will get results of three methods (ADMM, AA-ADMM, AA-DR).

2) To visualize the geodesic distance, use the command
 
	$ ViewScalarField MESH_FILE DATA_FILE

- MESH_FILE: triangle mesh file
- DATA_FILE: a distance file generated by the command GeodDistSolver



3) To compute distance error

	$ CompareDistance PARAMETERS_FILE DISTANCE_FILE REFERENCE_DISTANCE_FILE
  
- PARAMETERS_FILE: the parameter file previously used for computing geodesic distance; the command will read the source vertex array from this file.
- DISTANCE_FILE: the computed distance file
- REFERENCE_DISTANCE_FILE: a reference distance file that stores the ground-truth distance
